[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rlefer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/rlefer.html","id":"a-first-example","dir":"Articles","previous_headings":"","what":"A first example","title":"rlefer","text":"order draw curve rlefer, first need generate flow field. One important detail, flow field needs square (width equal height).","code":""},{"path":"/articles/rlefer.html","id":"generating-a-flow-field","dir":"Articles","previous_headings":"A first example","what":"Generating a flow field","title":"rlefer","text":"first example, let’s draw evenly-spaced curves flow field 120x120 dimensions. can generate flow field ambient R package like : make flow field stronger violent, scale values flow field multiplying \\(2\\pi\\): can visualize flow field grid angle values, like :","code":"library(ambient) flow_field_width <- 120 set.seed(50) flow_field <- noise_perlin(c(flow_field_width, flow_field_width)) flow_field <- 2 * pi * flow_field library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors  build_grid_df <- function(angles, n) {   tibble(     x = rep(seq_len(n), each = n),     y = rep(seq_len(n), times = n),     value = angles |> as.vector()   ) }  visualize_grid <- function(grid, n){   # Calculate the n^2 lines   grid <- grid %>%      mutate(       line_id = seq_len(nrow(grid)),       xend = cos(value),       yend = sin(value),     )      # Spread the lines across the grid   grid <- grid %>%      mutate(       xend = xend + x,       yend = yend + y     )      # Plot these lines   u <- \"inches\"   a <- arrow(length = unit(0.025, u))   ggplot(grid) +     geom_segment(       aes(         x = x, y = y,         xend = xend,yend = yend,         group = line_id       ),       arrow = a     ) +     coord_cartesian(       xlim = c(0,n), ylim = c(0,n)     ) +     theme_void() }  grid <- build_grid_df(flow_field, flow_field_width) visualize_grid(grid, flow_field_width)"},{"path":"/articles/rlefer.html","id":"how-curves-are-drawn-in-rlefer","dir":"Articles","previous_headings":"","what":"How curves are drawn in rlefer?","title":"rlefer","text":"functions rlefer draws curves walking flow field. words, start somewhere flow field, start walk following direction angle values encounter trough flow field. walk trough, record x y coordinates step take, , end process, sequence points, can connect form curve. curve drawn rlefer essentially sequence points can connect visualize curve represent. ggplot2 example, can use geoms geom_path() geom_line() visualize curves.","code":""},{"path":"/articles/rlefer.html","id":"drawing-evenly-spaced-curves-with-rlefer","dir":"Articles","previous_headings":"","what":"Drawing evenly-spaced curves with rlefer","title":"rlefer","text":"Now flow field prepared, can start draw curves flow field. , want decide want draw curves non-overlapping, also, curves evenly-spaced . want avoid overlapping curves, want full control starting points curve, use rlefer::non_overlapping_curves() function. function uses just part Jobard Lefer (1997) algorithm responsible overlap checking draw non-overlapping curves. contrast, want avoid overlapping curves, also want curves evenly-spaced , , use rlefer::even_spaced_curves() function, takes full advantage Jobard Lefer (1997) algorithm draw curves non-overlapping, also, evenly-spaced . first example, let’s consider want draw non-overlapping evenly-spaced curves. going use rlefer::even_spaced_curves() function. use function want set variables. First, want decide point flow field going start drawing curves. single point, going starting point first point drawn flow field. , ask function draw 100 curves, first draw single curve x y coordinates gave starting point. , function start draw remaining 99 curves, picking starting points d_sep distance curve. remaining curves automatically derived first curve drawn. example, set starting point x = 45 y = 24. numbers need inside flow field bounds. x < flow_field_width y < flow_field_width needs true. Let’s start drawing 100 curves. walk 40 steps (n_steps) curve, step, walk distance 1% flow field width (step_length) step. raise number steps taken, curves drawn longer, otherwise, look shorter. Also, raise distance taken step, curve longer. curve get result, might precise, probably look bit ugly. set number low, curve look short even number steps taken curve high. , careful number, don’t set high low. 1% flow field width usually good number. Now, distance curve (d_sep), called “separating distance” , 1.0. algorithm constantly check curve minimum distance d_sep ’s neighbors.  raise number steps, get longer curves, spatial distribution curves might change also. longer curves, new spots, new positions become available algorithm candidates starting points new curves. Also, raise number curves, , curves obviously image, , result, image look full. example, let’s raise number steps 70, number curves 300:  can continue increase number curves fill image, gets completely filled curves.","code":"library(rlefer) library(ggplot2)  n_steps <- 40 n_curves <- 100 min_allowed_steps <- 5 step_length <- 0.01 * flow_field_width d_sep <- 1.0  # The coordinates x = 45 and y = 24 are used as the starting point: curves <- even_spaced_curves(   45, 24,   n_curves,   n_steps,   min_allowed_steps,   step_length,   d_sep,   flow_field )   ggplot(curves) +   geom_path(     aes(x, y, group = curve_id)   ) +   coord_cartesian(     xlim = c(0, flow_field_width),     ylim = c(0, flow_field_width)   ) +   theme_void() n_curves <- 300 n_steps <- 70  curves <- even_spaced_curves(   45, 24,   n_curves,   n_steps,   min_allowed_steps,   step_length,   d_sep,   flow_field )  ggplot(curves) +   geom_path(     aes(x, y, group = curve_id)   ) +   coord_cartesian(     xlim = c(0, flow_field_width),     ylim = c(0, flow_field_width)   ) +   theme_void()"},{"path":"/articles/rlefer.html","id":"drawing-non-overlapping-curves","dir":"Articles","previous_headings":"","what":"Drawing non-overlapping curves","title":"rlefer","text":"might get frustrated rlefer::even_spaced_curve(), selects starting points derived curves automatically . might want better control curve starts. case, , use rlefer::non_overlapping_curves() function instead. function accepts list starting points curve. words, element input list, another list two named elements (x y) contains x y coordinates starting point. number curves want draw automatically derived length input list. function draw curve starting point described list, constantly check curve overlapping ’s neighbors curves. example , using runif() randomly select starting points across flow field.","code":"set.seed(80) xs <- runif(n_curves) set.seed(90) ys <- runif(n_curves) xs <- xs * flow_field_width ys <- ys * flow_field_width starting_points <- list() for(i in seq_len(n_curves)) {   starting_points[[i]] <- list(x = xs[i], y = ys[i]) }  curves <- non_overlapping_curves(   starting_points,   n_steps,   5,   step_length,   d_sep,   flow_field )  ggplot(curves) +   geom_path(     aes(x, y, group = curve_id)   ) +   coord_cartesian(     xlim = c(0, flow_field_width),     ylim = c(0, flow_field_width)   ) +   theme_void()"},{"path":"/articles/rlefer.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"rlefer","text":"Jobard, Bruno, Wilfrid Lefer. 1997. “Creating Evenly-Spaced Streamlines Arbitrary Density.” Visualization Scientific Computing ’97, edited Wilfrid Lefer Michel Grave, 43–55. Vienna: Springer Vienna.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Duarte Faria. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Faria PD (2024). rlefer: Draw evenly-spaced non-overlapping curves flow field. R package version 1.0.","code":"@Manual{,   title = {rlefer: Draw evenly-spaced and non-overlapping curves in a flow field},   author = {Pedro Duarte Faria},   year = {2024},   note = {R package version 1.0}, }"},{"path":"/index.html","id":"rlefer","dir":"","previous_headings":"","what":"Draw evenly-spaced and non-overlapping curves in a flow field","title":"Draw evenly-spaced and non-overlapping curves in a flow field","text":"rlefer R package provides interface Jobard Lefer (1997) algorithm implemented C++. algorithm can used draw non-overlapping evenly-spaced curves flow field (.e. vector field). algorithm thoroughly described scientific paper (Jobard Lefer 1997), might find article useful . example output might end getting rlefer:","code":""},{"path":"/index.html","id":"install-the-package","dir":"","previous_headings":"","what":"Install the package","title":"Draw evenly-spaced and non-overlapping curves in a flow field","text":"install package, run:","code":"remotes::install_github(\"The-Erebor-Foundry/rlefer\")"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Draw evenly-spaced and non-overlapping curves in a flow field","text":"order draw curve rlefer, need flow field first. different ways generating flow field, easiest common way , using 2D (“two dimensional”) noise generators, Perlin Noise algorithm. R, can easily generate flow field Perlin Noise using noise_perlin() function ambient package. flow field, essence, 2D matrix numeric values. value matrix represents angle value. words, can visualize flow field 2D grid angle values. example , generating flow field 240x240. , matrix 240 rows 240 columns. generated flow field want use, can start draw curves . rlefer package offers two main functions draw curves, : rlefer::non_overlapping_curves() rlefer::even_spaced_curves(). want draw curves overlap , care much far , probably want use function rlefer::non_overlapping_curves(). want draw curves non-overlapping evenly-spaced , , function rlefer::even_spaced_curves() suitable . example , attempting draw 100 curves flow field, using 0.5 “separating distance”, 2.4 “step length”, 30 steps curve, minimum number steps allowed 5. get result, tibble object x y coordinates curve drawn.","code":"library(ambient) set.seed(100) flow_field <- noise_perlin(c(240, 240)) library(rlefer) curves <- even_spaced_curves(   45, 24,   100,   30,   5,   0.01 * 240,   0.5,   flow_field )  curves # A tibble: 1,627 × 6    curve_id steps_taken     x     y direction_id step_ids       <dbl>       <dbl> <dbl> <dbl>        <dbl>    <dbl>  1        0          30  45    24              0        0  2        0          30  42.7  23.3            0        1  3        0          30  40.4  22.7            0        2  4        0          30  38.1  22.1            0        3  5        0          30  35.7  21.5            0        4  6        0          30  33.4  20.8            0        5  7        0          30  31.1  20.2            0        6  8        0          30  28.8  19.6            0        7  9        0          30  26.5  18.9            0        8 10        0          30  24.2  18.3            0        9 # ℹ 1,617 more rows # ℹ Use `print(n = ...)` to see more rows"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Draw evenly-spaced and non-overlapping curves in a flow field","text":"Jobard, Bruno, Wilfrid Lefer. 1997. “Creating Evenly-Spaced Streamlines Arbitrary Density.” Visualization Scientific Computing ’97, edited Wilfrid Lefer Michel Grave, 43–55. Vienna: Springer Vienna.","code":""},{"path":"/reference/even_spaced_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"Draws multiple evenly-spaced non-overlapping curves flow field, using Jobard Lefer (1997) algorithm.","code":""},{"path":"/reference/even_spaced_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"","code":"even_spaced_curves(   x_start,   y_start,   n_curves,   n_steps,   min_steps_allowed,   step_length,   d_sep,   flow_field )"},{"path":"/reference/even_spaced_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"x_start x coordinate starting point function start draw curve. y_start y coordinate starting point function start draw curve. n_curves number curves want draw. n_steps number steps used draw curve. min_steps_allowed minimum number steps allowed curve (see Details info). step_length length/distance taken step. d_sep \"separation distance\", .e., amount distance curve must neighbouring curves. flow_field 2D matrix double values, double value represents angle value.","code":""},{"path":"/reference/even_spaced_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"function returns tibble object 6 columns: curve_id: ID curve. x: x coordinates point represents curve. y: y coordinates point represents curve. direction_id: direction algorithm following drawing current point (0 means left right, 1 means right left). step_id: ID (number) current step. steps_taken: number steps taken draw current curve.","code":""},{"path":"/reference/even_spaced_curves.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"can use function draw multiple curves flow field. curve non-overlapping evenly-space neighbors. essence, function takes single starting point (x_start y_start) flow field, starts draw initial curve flow field. , function starts loop process, draw n_curves - 1 curves initial curve. words, curves drawn flow field derived initial curve. worth noting starting point represents \"middle point\" curve, function draws curve directions. direction_id column output function. indicates direction function following drawing current section (\"step\") current curve. step way, function check current curve drawn close neighbors, calculating distance existing curves around . current curve getting close neighbor curve, , function stop drawing current curve, start draw next curve queue. function starts draw new curve, starting point new curve already close existing curves, , function completely drops curve (.e. \"gives \" drawing curve), jumps next curve queue. Also, function draws new curve, curve less min_allowed_steps steps, , curve also completely dropped. avoids getting high number curves short. words, guaranteed function draw exactly n_curves curves field, , might enough space n_curves curves, considering current settings. , function attempt draw many curves possible. long overlapping , close neighbouring curves, function continue draw curves field. details algorithm works, check: https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/en/","code":""},{"path":"/reference/even_spaced_curves.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"Jobard, Bruno, Wilfrid Lefer. 1997. “Creating Evenly-Spaced Streamlines Arbitrary Density.” Visualization Scientific Computing ’97, edited Wilfrid Lefer Michel Grave, 43–55. Vienna: Springer Vienna.","code":""},{"path":"/reference/even_spaced_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws multiple evenly-spaced and non-overlapping curves in a flow field. — even_spaced_curves","text":"","code":"library(ambient) set.seed(50) flow_field <- noise_perlin(c(240, 240)) # The coordinates x = 45 and y = 24 are used as the starting point: curves <- even_spaced_curves(   45, 24,   100,   30,   5,   0.01*240,   0.5,   flow_field )"},{"path":"/reference/even_spaced_curves_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"R wrapper around the C++ implementation for even spaced curves. — even_spaced_curves_impl","title":"R wrapper around the C++ implementation for even spaced curves. — even_spaced_curves_impl","text":"Use function rlefer::even_spaced_curves() instead.","code":""},{"path":"/reference/even_spaced_curves_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R wrapper around the C++ implementation for even spaced curves. — even_spaced_curves_impl","text":"","code":"even_spaced_curves_impl(   x_start1,   y_start1,   n_curves1,   n_steps1,   min_steps_allowed1,   step_length1,   d_sep1,   flow_field1,   flow_field_width1 )"},{"path":"/reference/even_spaced_curves_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R wrapper around the C++ implementation for even spaced curves. — even_spaced_curves_impl","text":"x_start1 x coordinate starting point function start draw curve. y_start1 y coordinate starting point function start draw curve. n_curves1 number curves want draw. n_steps1 number steps used draw curve. min_steps_allowed1 minimum number steps allowed curve (see Details info). step_length1 length/distance taken step. d_sep1 \"separation distance\", .e., amount distance curve must neighbouring curves. flow_field1 2D matrix double values, double value represents angle value. flow_field_width1 width input flow field.","code":""},{"path":"/reference/non_overlapping_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"Draws multiple non-overlapping curves flow field, using Jobard Lefer (1997) algorithm.","code":""},{"path":"/reference/non_overlapping_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"","code":"non_overlapping_curves(   starting_points,   n_steps,   min_steps_allowed,   step_length,   d_sep,   flow_field )"},{"path":"/reference/non_overlapping_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"starting_points list object, x y coordinates starting points curve. n_steps number steps used draw curve. min_steps_allowed minimum number steps allowed curve (see Details info). step_length length/distance taken step. d_sep \"separation distance\", .e., amount distance curve must neighbouring curves. flow_field 2D matrix double values, double value represents angle value.","code":""},{"path":"/reference/non_overlapping_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"function returns tibble object 6 columns: curve_id: ID curve. x: x coordinates point represents curve. y: y coordinates point represents curve. direction_id: direction algorithm following drawing current point (0 means left right, 1 means right left). step_id: ID (number) current step. steps_taken: number steps taken draw current curve.","code":""},{"path":"/reference/non_overlapping_curves.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"want draw curves \"non-overlapping\", also, \"evenly-spaced\" , use even_spaced_curves() function instead. care curves non-overlapping , , function . can use function draw multiple curves flow field. curve non-overlapping neighbors. essence, function takes list starting points curve want draw. function attempt draw curve starting point. worth noting starting point represents \"middle point\" curve, function draws curve directions. direction_id column output function. indicates direction function following drawing current section (\"step\") current curve. step way, function check current curve drawn close neighbors, calculating distance existing curves around . current curve getting close neighbor curve, , function stop drawing current curve, start draw next curve queue. function starts draw new curve, starting point new curve already close existing curves, , function completely drops curve (.e. \"gives \" drawing curve), jumps next curve queue. Also, function draws new curve, curve less min_allowed_steps steps, , curve also completely dropped. avoids getting high number curves short. words, guaranteed function draw exactly n_curves curves field, , might enough space n_curves curves, considering current settings. , function attempt draw many curves possible. long overlapping , close neighbouring curves, function continue draw curves field. details algorithm works, check: https://pedro-faria.netlify.app/posts/2024/2024-02-19-flow-even/en/","code":""},{"path":"/reference/non_overlapping_curves.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"Jobard, Bruno, Wilfrid Lefer. 1997. “Creating Evenly-Spaced Streamlines Arbitrary Density.” Visualization Scientific Computing ’97, edited Wilfrid Lefer Michel Grave, 43–55. Vienna: Springer Vienna.","code":""},{"path":"/reference/non_overlapping_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws multiple non-overlapping curves in a flow field. — non_overlapping_curves","text":"","code":"library(ambient) set.seed(50) flow_field <- noise_perlin(c(240, 240)) set.seed(80) xs <- runif(100) set.seed(90) ys <- runif(100) xs <- xs * 240 ys <- ys * 240 starting_points <- list() for(i in seq_len(100)) {   starting_points[[i]] <- list(x = xs[i], y = ys[i]) }  curves <- non_overlapping_curves(   starting_points,   30,   5,   0.01*240,   0.5,   flow_field )"},{"path":"/reference/non_overlapping_curves_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"R wrapper around the C++ implementation for non overlapping curves. — non_overlapping_curves_impl","title":"R wrapper around the C++ implementation for non overlapping curves. — non_overlapping_curves_impl","text":"Use function rlefer::non_overlapping_curves() instead.","code":""},{"path":"/reference/non_overlapping_curves_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R wrapper around the C++ implementation for non overlapping curves. — non_overlapping_curves_impl","text":"","code":"non_overlapping_curves_impl(   starting_points,   n_curves,   n_steps,   min_steps_allowed,   step_length,   d_sep,   flow_field,   flow_field_width )"},{"path":"/reference/non_overlapping_curves_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R wrapper around the C++ implementation for non overlapping curves. — non_overlapping_curves_impl","text":"starting_points list object, x y coordinates starting points curve. n_curves number curves want draw. n_steps number steps used draw curve. min_steps_allowed minimum number steps allowed curve (see Details info). step_length length/distance taken step. d_sep \"separation distance\", .e., amount distance curve must neighbouring curves. flow_field 2D matrix double values, double value represents angle value. flow_field_width width input flow field.","code":""},{"path":"/reference/point_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Get order ID of each point in the curve — point_order","title":"Get order ID of each point in the curve — point_order","text":"Helper function get order ID point curve.","code":""},{"path":"/reference/point_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get order ID of each point in the curve — point_order","text":"","code":"point_order(direction_id)"},{"path":"/reference/point_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get order ID of each point in the curve — point_order","text":"direction_id integer vector direction IDs.","code":""}]
