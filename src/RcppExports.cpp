// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rlefer.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// even_spaced_curves
std::vector<lefer::Curve> even_spaced_curves(double x_start, double y_start, int n_curves, int n_steps, int min_steps_allowed, double step_length, double d_sep, double** flow_field, int flow_field_width);
RcppExport SEXP _rlefer_even_spaced_curves(SEXP x_startSEXP, SEXP y_startSEXP, SEXP n_curvesSEXP, SEXP n_stepsSEXP, SEXP min_steps_allowedSEXP, SEXP step_lengthSEXP, SEXP d_sepSEXP, SEXP flow_fieldSEXP, SEXP flow_field_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x_start(x_startSEXP);
    Rcpp::traits::input_parameter< double >::type y_start(y_startSEXP);
    Rcpp::traits::input_parameter< int >::type n_curves(n_curvesSEXP);
    Rcpp::traits::input_parameter< int >::type n_steps(n_stepsSEXP);
    Rcpp::traits::input_parameter< int >::type min_steps_allowed(min_steps_allowedSEXP);
    Rcpp::traits::input_parameter< double >::type step_length(step_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type d_sep(d_sepSEXP);
    Rcpp::traits::input_parameter< double** >::type flow_field(flow_fieldSEXP);
    Rcpp::traits::input_parameter< int >::type flow_field_width(flow_field_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(even_spaced_curves(x_start, y_start, n_curves, n_steps, min_steps_allowed, step_length, d_sep, flow_field, flow_field_width));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rlefer_even_spaced_curves", (DL_FUNC) &_rlefer_even_spaced_curves, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_rlefer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
